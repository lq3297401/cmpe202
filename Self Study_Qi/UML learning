UML包括：
事物Things
关系Relationships
图Diagrams
扩展机制

事物Things：
结构 Structural ：类 Class，接口 Interface，构件，节点等等
行为Behavioral：交互（消息），状态等等
分组 Grouping：包，子系统等等
注释 Annotational：注释

	结构Structural things:
	The Structural things define the static part of the model. They represent physical and conceptual 	elements. Following are the brief descriptions of the structural things.
	Class:
	Class represents set of objects having similar responsibilities.
	类，分三行，分别是：名称，变量，方法
 
	Interface:
	Interface defines a set of operations which specify the responsibility of a class.
 
	Collaboration:
	Collaboration defines interaction between elements.
 
	Use case:
	Use case represents a set of actions performed by a system for a specific goal.
 
	Component:
	Component describes physical part of a system.
 
	Node:
	A node can be defined as a physical element that exists at run time.

	
行为Behavioral things:
A behavioral thing consists of the dynamic parts of UML models. Following are the behavioral things:
Interaction:
Interaction is defined as a behavior that consists of a group of messages exchanged among elements to accomplish a specific task.
 
State machine:
State machine is useful when the state of an object in its life cycle is important. It defines the sequence of states an object goes through in response to events. Events are external factors responsible for state change.
 
分组Grouping things:
Grouping things can be defined as a mechanism to group elements of a UML model together. There is only one grouping thing available:
Package:
Package is the only one grouping thing available for gathering structural and behavioral things.
 
注释Annotational things:
Annotational things can be defined as a mechanism to capture remarks, descriptions, and comments of UML model elements. Note is the only one Annotational thing available.
Note:
A note is used to render comments, constraints etc of an UML element.

	

关系：
依赖
关联（聚合(整体与部分的关系)，组合（强聚合，一旦删除了整体，部分就不存在了，整体和部分生命周期一致））
泛化（继承）
实现

Relationship:
Relationship is another most important building block of UML. It shows how elements are associated with each other and this association describes the functionality of an application.
There are four kinds of relationships available.
依赖关系(Dependency):
Dependency is a relationship between two things in which change in one element also affects the other one.
依赖关系是用一套带箭头的虚线表示的；如下图表示A依赖于B；他描述一个对象在运行期间会用到另一个对象的关系；
 
与关联关系不同的是，它是一种临时性的关系，通常在运行期间产生，并且随着运行时的变化； 依赖关系也可能发生变化；
显然，依赖也有方向，双向依赖是一种非常糟糕的结构，我们总是应该保持单向依赖，杜绝双向依赖的产生；
注：在最终代码中，依赖关系体现为类构造方法及类方法的传入参数，箭头的指向为调用关系；依赖关系除了临时知道对方外，还是“使用”对方的方法和属性；

 
关联关系(Association):
Association is basically a set of links that connects elements of an UML model. It also describes how many objects are taking part in that relationship.
关联关系是用一条直线表示的；它描述不同类的对象之间的结构关系；它是一种静态关系， 通常与运行状态无关，一般由常识等因素决定的；它一般用来定义对象之间静态的、天然的结构； 所以，关联关系是一种“强关联”的关系；
比如，乘车人和车票之间就是一种关联关系；学生和学校就是一种关联关系；
关联关系默认不强调方向，表示对象间相互知道；如果特别强调方向，如下图，表示A知道B，但 B不知道A；

 

聚合关系(Aggregation)
聚合关系用一条带空心菱形箭头的直线表示，如下图表示A聚合到B上，或者说B由A组成；
 
聚合关系用于表示实体对象之间的关系，表示整体由部分构成的语义；例如一个部门由多个员工组成；
与组合关系不同的是，整体和部分不是强依赖的，即使整体不存在了，部分仍然存在；例如， 部门撤销了，人员不会消失，他们依然存在；

组合关系(Composition)
组合关系用一条带实心菱形箭头直线表示，如下图表示A组成B，或者B由A组成；
 
与聚合关系一样，组合关系同样表示整体由部分构成的语义；比如公司由多个部门组成；
但组合关系是一种强依赖的特殊聚合关系，如果整体不存在了，则部分也不存在了；例如， 公司不存在了，部门也将不存在了

继承（Inheritance）: 由泛化和实现来表示

泛化关系(Generalization):
Generalization can be defined as a relationship which connects a specialized element with a generalized element. It basically describes inheritance relationship in the world of objects.
继承关系为 is-a的关系；两个对象之间如果可以用 is-a 来表示，就是继承关系：（..是..)
eg：自行车是车、猫是动物
泛化关系用一条带空心箭头的直接表示；如下图表示（A继承自B）；

 
实现关系(Realization):
Realization can be defined as a relationship in which two elements are connected. One element describes some responsibility which is not implemented and the other one implements them. This relationship exists in case of interfaces.
实现关系用一条带空心箭头的虚线表示；
eg：”车”为一个抽象概念，在现实中并无法直接用来定义对象；只有指明具体的子类(汽车还是自行车)，才 可以用来定义对象（”车”这个类在C++中用抽象类表示，在JAVA中有接口这个概念，更容易理解）




图（相当于不同的角度来观察系统，例：交通图，行政图等等）：
类图(从需求角度)
时序图（）
学习顺序：类图－＞顺序图－＞用例图－＞活动图－＞状态图

	UML Diagrams:
UML diagrams are the ultimate output of the entire discussion. All the elements, relationships are used to make a complete UML diagram and the diagram represents a system.
The visual effect of the UML diagram is the most important part of the entire process. All the other elements are used to make it a complete one.
UML includes the following nine diagrams and the details are described in the following chapters.
Class diagram 
Object diagram 
Use case diagram 
Sequence diagram 
Collaboration diagram 
Activity diagram 
Statechart diagram 
Deployment diagram 
Component diagram 



扩展机制：
Stereotype, Tagged Value, Constraint


UML - Basic Notations
Structural Things:
Graphical notations used in structural things are the most widely used in UML. These are considered as the nouns of UML models. Following are the list of structural things.
Classes 
object 
Interface 
Collaboration 
Use case 
Active classes 
Components 
Nodes 
Class Notation:
UML class is represented by the diagram shown below. The diagram is divided into four parts.
The top section is used to name the class. 
The second one is used to show the attributes of the class. 
The third section is used to describe the operations performed by the class. 
The fourth section is optional to show any additional components. 
 
Classes are used to represent objects. Objects can be anything having properties and responsibility.
Object Notation:
The object is represented in the same way as the class. The only difference is the name which is underlined as shown below.
 
As object is the actual implementation of a class which is known as the instance of a class. So it has the same usage as the class.
Interface Notation:
Interface is represented by a circle as shown below. It has a name which is generally written below the circle.
 
Interface is used to describe functionality without implementation. Interface is the just like a template where you define different functions not the implementation. When a class implements the interface it also implements the functionality as per the requirement.
Collaboration Notation:
Collaboration is represented by a dotted eclipse as shown below. It has a name written inside the eclipse.
 
Collaboration represents responsibilities. Generally responsibilities are in a group.
Use case Notation:
Use case is represented as an eclipse with a name inside it. It may contain additional responsibilities.
 
Use case is used to capture high level functionalities of a system.
Actor Notation:
An actor can be defined as some internal or external entity that interacts with the system.
 
Actor is used in a use case diagram to describe the internal or external entities.
Initial State Notation:
Initial state is defined to show the start of a process. This notation is used in almost all diagrams.
 
The usage of Initial State Notation is to show the starting point of a process.
Final State Notation:
Final state is used to show the end of a process. This notation is also used in almost all diagrams to describe the end.
 
The usage of Final State Notation is to show the termination point of a process.
Active class Notation:
Active class looks similar to a class with a solid border. Active class is generally used to describe concurrent behaviour of a system.
 
Active class is used to represent concurrency in a system.
Component Notation:
A component in UML is shown as below with a name inside. Additional elements can be added wherever required.
 
Component is used to represent any part of a system for which UML diagrams are made.
Node Notation:
A node in UML is represented by a square box as shown below with a name. A node represents a physical component of the system.
 
Node is used to represent physical part of a system like server, network etc.
Behavioural Things:
Dynamic parts are one of the most important elements in UML. UML has a set of powerful features to represent the dynamic part of software and non software systems. These features include interactions and state machines.
Interactions can be of two types:
Sequential (Represented by sequence diagram) 
Collaborative (Represented by collaboration diagram) 
Interaction Notation:
Interaction is basically message exchange between two UML components. The following diagram represents different notations used in an interaction.
 
Interaction is used to represent communication among the components of a system.
State machine Notation:
State machine describes the different states of a component in its life cycle. The notations are described in the following diagram.
 
State machine is used to describe different states of a system component. The state can be active, idle or any other depending upon the situation.
Grouping Things:
Organizing the UML models are one of the most important aspects of the design. In UML there is only one element available for grouping and that is package.
Package Notation:
Package notation is shown below and this is used to wrap the components of a system.
 
Annotational Things:
In any diagram explanation of different elements and their functionalities are very important. So UML has notes notation to support this requirement.
Note Notation:
This notation is shown below and they are used to provide necessary information of a system.


Relationships
A model is not complete unless the relationships between elements are described properly. The Relationship gives a proper meaning to an UML model. Following are the different types of relationships available in UML.
Dependency 
Association 
Generalization 
Extensibility 
Dependency Notation:
Dependency is an important aspect in UML elements. It describes the dependent elements and the direction of dependency.
Dependency is represented by a dotted arrow as shown below. The arrow head represents the independent element and the other end the dependent element.
 
Dependency is used to represent dependency between two elements of a system.
Association Notation:
Association describes how the elements in an UML diagram are associated. In simple word it describes how many elements are taking part in an interaction.
Association is represented by a dotted line with (without) arrows on both sides. The two ends represent two associated elements as shown below. The multiplicity is also mentioned at the ends (1, * etc) to show how many objects are associated.
 
Association is used to represent the relationship between two elements of a system.
Generalization Notation:
Generalization describes the inheritance relationship of the object oriented world. It is parent and child relationship.
Generalization is represented by an arrow with hollow arrow head as shown below. One end represents the parent element and the other end child element.
 
Generalization is used to describe parent-child relationship of two elements of a system.
Extensibility Notation:
All the languages (programming or modeling) have some mechanism to extend its capabilities like syntax, semantics etc. UML is also having the following mechanisms to provide extensibility features.
Stereotypes (Represents new elements) 
Tagged values (Represents new attributes) 
Constraints (Represents the boundaries) 
 
Extensibility notations are used to enhance the power of the language. It is basically additional elements used to represent some extra behaviour of the system. These extra behaviours are not covered by the standard available notations.

UML - Standard Diagrams
Sequence Diagram: 
A sequence diagram is an interaction diagram. From the name it is clear that the diagram deals with some sequences, which are the sequence of messages flowing from one object to another.
Interaction among the components of a system is very important from implementation and execution perspective.
So Sequence diagram is used to visualize the sequence of calls in a system to perform a specific functionality.
时序图
为了展示对象之间的交互细节，后续对设计模式解析的章节，都会用到时序图；
时序图（Sequence Diagram）是显示对象之间交互的图，这些对象是按时间顺序排列的。时序图中显示的是参与交互的对象及其对象之间消息交互的顺序。
时序图包括的建模元素主要有：对象（Actor）、生命线（Lifeline）、控制焦点（Focus of control）、消息（Message）等等。

